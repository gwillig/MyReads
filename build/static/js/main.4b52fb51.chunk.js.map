{"version":3,"sources":["components/Body/BookCard.js","components/Body/BooksAPI.js","components/Body/BookShelf.js","components/Header/HeadSection.js","components/Footer/Footer.js","components/Body/Searchpage.js","App.js","index.js"],"names":["BookCard","state","book","props","open","getStyle","imageLinks","width","height","backgroundImage","thumbnail","get_description","description","substring","e","select_shelf","target","value","book_id","getAttribute","this","handleChange","className","style","onClick","setState","aria-controls","aria-expanded","data-bookid","id","shelf","onChange","bind","disabled","title","authors","toString","Collapse","in","href","previewLink","React","Component","api","token","localStorage","Math","random","substr","headers","getAll","fetch","then","res","json","data","books","update","method","body","JSON","stringify","search","query","BookShelf","searchBooks","input_field","response","error","searchResult","map","book_search_result","tabs","defaultActiveKey","tab_style","minHeight","backgroundColor","Tabs","element","Tab","eventKey","filter","margin","type","placeholder","HeadSection","style_head","color","span_style","Jumbotron","Footer","textAlign","Searchpage","to","App","exact","path","render","Row","Col","paddingRight","noGutters","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.4b52fb51.chunk.js","sourcesContent":["import React from \"react\"\r\nimport { Collapse} from 'react-bootstrap'\r\n\r\n\r\nclass BookCard extends React.Component {\r\n\r\n    state = {\r\n        book:this.props.book,\r\n        open: false,\r\n\r\n    }\r\n\r\n    getStyle =(book)=>{\r\n        //1.Step: Check if image_url is not empty\r\n        if(book.book.imageLinks){\r\n            return{\r\n                width: 128,\r\n                height: 192,\r\n                backgroundImage: `url(${book.book.imageLinks.thumbnail})`,\r\n\r\n            }\r\n        }\r\n\r\n    }\r\n    handleChange(e){\r\n        /*@description:\r\n            Detected change in select tag\r\n        */\r\n        //1.Step: Get the selected shelf for the book\r\n        let select_shelf = e.target.value;\r\n        let book_id = e.target.getAttribute(\"data-bookid\");\r\n        //2.Step: Call the parent function and handover the book and selected shelf\r\n        this.props.handleChange(book_id,select_shelf)\r\n    }\r\n    get_description= (book)=>{\r\n\r\n        try{\r\n\r\n\r\n           let book_description =  book.props.book.description.substring(0, 100)\r\n           return book_description\r\n        }\r\n        catch(e){\r\n            return \"No description\"\r\n        }\r\n    }\r\n    render(){\r\n        const { open } = this.state;\r\n\r\n        // return(<h1>{this.state.book.shelf}</h1>)\r\n        return (\r\n            <li key={this.state.book.id}>\r\n                <div className=\"book\">\r\n                    <div className=\"book-top\">\r\n\r\n                        <div className=\"book-cover\" style={this.getStyle(this.state)}\r\n                             onClick={() => this.setState({open: !open})}\r\n                             aria-controls=\"example-collapse-text\"\r\n                             aria-expanded={open}></div>\r\n                        <div className=\"book-shelf-changer\">\r\n                            <select data-bookid= {this.state.book.id} value={this.state.book.shelf} onChange={this.handleChange.bind(this)}>\r\n                                <option value=\"move\" disabled>Move to...</option>\r\n                                <option  value=\"currentlyReading\">Currently Reading</option>\r\n                                <option value=\"wantToRead\">Want to Read</option>\r\n                                <option value=\"read\">Read</option>\r\n                                <option value=\"none\">None</option>\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"book-title\">{this.state.book.title}</div>\r\n                    <div className=\"book-authors\">{this.state.book.authors?this.state.book.authors.toString():\"Unkown\"}</div>\r\n\r\n\r\n                    <div >\r\n                        <Collapse in={this.state.open}>\r\n                            <div id=\"example-collapse-text\">\r\n                                {\r\n                                    this.get_description(this)\r\n                                }\r\n\r\n                                <a href={`${this.state.book.previewLink}`} target=\"noreferrer\">...[MORE]</a>\r\n\r\n\r\n                            </div>\r\n                        </Collapse>\r\n                    </div>\r\n\r\n                </div>\r\n            </li>    )\r\n    }\r\n}\r\n\r\nexport default BookCard\r\n","/*\r\n#### 1.2. Explainion of BookAPI\r\n\r\n## Backend Server\r\n\r\nThe Books.API contains the methods you will need to perform necessary operations on the backend:\r\n\r\n* [`getAll`](#getall)\r\n* [`update`](#update)\r\n* [`search`](#search)\r\n\r\n### `getAll`\r\n\r\nMethod Signature:\r\n\r\n```js\r\ngetAll()\r\n```\r\n\r\n* Returns a Promise which resolves to a JSON object containing a collection of book objects.\r\n* This collection represents the books currently in the bookshelves in your app.\r\n\r\n### `update`\r\n\r\nMethod Signature:\r\n\r\n```js\r\nupdate(book, shelf)\r\n```\r\n\r\n* book: `<Object>` containing at minimum an `id` attribute\r\n* shelf: `<String>` contains one of [\"wantToRead\", \"currentlyReading\", \"read\"]\r\n* Returns a Promise which resolves to a JSON object containing the response data of the POST request\r\n\r\n### `search`\r\n\r\nMethod Signature:\r\n\r\n```js\r\nsearch(query)\r\n```\r\n* query: `<String>`\r\n* Returns a Promise which resolves to a JSON object containing a collection of a maximum of 20 book objects.\r\n* These books do not know which shelf they are on. They are raw results only. You'll need to make sure that books have the correct state while on the search page.\r\n\r\n## Important\r\nThe backend API uses a fixed set of cached search results and is limited to a particular set of search terms, which can be found in [SEARCH_TERMS.md](SEARCH_TERMS.md). That list of terms are the _only_ terms that will work with the backend, so don't be surprised if your searches for Basket Weaving or Bubble Wrap don't come back with any results.\r\n\r\n* */\r\n\r\nconst api = \"https://reactnd-books-api.udacity.com\"\r\n\r\n\r\n// Generate a unique token for storing your bookshelf data on the backend server.\r\nlet token = localStorage.token\r\nif (!token)\r\n  token = localStorage.token = Math.random().toString(36).substr(-8)\r\n\r\nconst headers = {\r\n  'Accept': 'application/json',\r\n  'Authorization': token\r\n}\r\n\r\nexport const get = (bookId) =>\r\n  fetch(`${api}/books/${bookId}`, { headers })\r\n    .then(res => res.json())\r\n    .then(data => data.book)\r\n\r\nexport const getAll = () =>\r\n  fetch(`${api}/books`, { headers })\r\n    .then(res => res.json())\r\n    .then(data => data.books)\r\n\r\nexport const update = (book, shelf) =>\r\n  fetch(`${api}/books/${book.id}`, {\r\n    method: 'PUT',\r\n    headers: {\r\n      ...headers,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ shelf })\r\n  }).then(res => res.json())\r\n\r\nexport const search = (query) =>\r\n  fetch(`${api}/search`, {\r\n    method: 'POST',\r\n    headers: {\r\n      ...headers,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ query })\r\n  }).then(res => res.json())\r\n    .then(data => data.books)\r\n","import React from 'react'\r\nimport {Tabs,Tab} from 'react-bootstrap';\r\nimport BookCard from './BookCard'\r\nimport {getAll, search,update} from \"./BooksAPI\";\r\n\r\n\r\nclass BookShelf extends React.Component {\r\n\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {\r\n            books:[],\r\n            searchResult:[],\r\n            tabs:[\r\n                {id:1, defaultActiveKey:\"currentlyReading\",title:\"Current Readings\"},\r\n                {id:2, defaultActiveKey:\"wantToRead\",title:\"Want to Read\"},\r\n                {id:3, defaultActiveKey:\"read\",title:\"Read\"},\r\n            ]\r\n        }\r\n    }\r\n\r\n\r\n    componentDidMount(){\r\n        getAll().then(\r\n            response=>{\r\n                this.setState({ books: response})\r\n\r\n            }\r\n        )\r\n    }\r\n\r\n    handleChange(book_id,select_shelf){\r\n        /*\r\n        * @description\r\n            Changes for a given book the shelf\r\n        * */\r\n\r\n\r\n\r\n\r\n\r\n        this.setState(\r\n            {books:this.state.books.map(book=>{\r\n                    if (book.id === book_id){\r\n                        //Update locally\r\n                        book.shelf = select_shelf\r\n                        // Update in Backend\r\n                        update(book,select_shelf)\r\n\r\n                    }\r\n                    return book\r\n\r\n                })\r\n            }\r\n            )\r\n\r\n        this.setState(\r\n            {searchResult:this.state.searchResult.map(book=>{\r\n                    if (book.id === book_id){\r\n                        book.shelf = select_shelf\r\n                        //Add Book to shelf\r\n                        this.setState({books:[...this.state.books,book]})\r\n                        // Update in Backend\r\n                        update(book,select_shelf)\r\n                    }\r\n                    return book\r\n                })            }\r\n        )\r\n\r\n\r\n    }\r\n\r\n\r\n    searchBooks = (e)=>{\r\n        let input_field =  e.target.value;\r\n        //1.Step: Check if input value is emtpy:\r\n        if (input_field!==\"\" ){\r\n            search(input_field).then(response=>{\r\n                //Step: Check if response contains an error\r\n                if(response.error){\r\n                    this.setState({searchResult:[]})\r\n                }\r\n                else{\r\n\r\n                    //1.Step: Set the shelf for each book\r\n                    //1.1.Step: Check for every book in search result if it is already in shelf\r\n                    this.state.books.map(book=>{\r\n\r\n                        response.map(book_search_result=>{\r\n\r\n                            if(book.title===\"Pro React\"&&book_search_result.title===\"Pro React\"){\r\n                                book_search_result.shelf=book.shelf\r\n                                return  book_search_result\r\n\r\n                            }\r\n                            //===================\r\n\r\n                            if(book.id===book_search_result.id){\r\n\r\n                                book_search_result.shelf=book.shelf\r\n                                return  book_search_result\r\n                            }\r\n                            //Check if book has already a shelf\r\n                            if(typeof book_search_result.shelf==='undefined'){\r\n                                book_search_result.shelf=\"none\"\r\n                                return  book_search_result\r\n                            }\r\n                            return  book_search_result\r\n\r\n                        })\r\n\r\n                        return book\r\n                    })\r\n\r\n                    this.setState({ searchResult: response})\r\n\r\n\r\n                }\r\n            })\r\n\r\n        }\r\n        else{\r\n            this.setState({searchResult:[]})\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        const tab_style={\r\n\r\n            minHeight:\"65vh\",\r\n            backgroundColor:\"#CEDFD4\"\r\n\r\n        }\r\n        const input_search_style={\r\n            margin:'10px'\r\n        }\r\n\r\n        return (\r\n            <Tabs defaultActiveKey={\"search\"} id=\"uncontrolled-tab-example\">\r\n                {/*Creates the three tabs \"Current Reading, Want to Read, Read\"*/}\r\n                {this.state.tabs.map(element=>{\r\n\r\n                    return (\r\n\r\n                        <Tab style={tab_style} key={element.id} eventKey={element.defaultActiveKey} title={element.title}>\r\n                            <div className=\"bookshelf\">\r\n                                <div className=\"bookshelf-books\">\r\n                                    <ol className=\"books-grid\">\r\n                                        {\r\n\r\n                                            this.state.books.filter(\r\n                                                book=>book.shelf===element.defaultActiveKey\r\n                                            ).map((book)=>(\r\n                                                <BookCard key={book.id}\r\n                                                    book={book}\r\n                                                    handleChange={this.handleChange.bind(this)}\r\n                                                ></BookCard>\r\n                                            ))\r\n                                        }\r\n                                    </ol>\r\n                                </div>\r\n                            </div>\r\n                        </Tab>\r\n                    )\r\n\r\n                })}\r\n                <Tab style={tab_style} eventKey=\"search\" title=\"Search\">\r\n                    <div className=\" tab-item-wrapper\" >\r\n                        <div className=\"bookshelf-books\">\r\n                            <div key=\"searchField\" className=\"input-group mb-3\">\r\n                                <input style={input_search_style} onChange={this.searchBooks} type=\"text\" className=\"form-control\" placeholder=\"Search Author\" />\r\n                            </div>\r\n                            <ol className=\"books-grid\">\r\n                                {\r\n                                    this.state.searchResult.map((book)=>(\r\n                                        <BookCard key={book.id}\r\n                                                  book={book}\r\n                                                  handleChange={this.handleChange.bind(this)}\r\n                                        ></BookCard>\r\n                                    ))\r\n                                }\r\n                            </ol>\r\n                        </div>\r\n                    </div>\r\n                </Tab>\r\n            </Tabs>\r\n        );\r\n    }\r\n}\r\nexport default BookShelf\r\n","import React from 'react'\r\nimport {Jumbotron } from \"react-bootstrap\";\r\n\r\nclass HeadSection extends React.Component {\r\n\r\n    style_head={\r\n        backgroundColor:\"rgb(23 70 135 / 0%)\",\r\n        color:'rgb(255 255 255)'\r\n    }\r\n\r\n    span_style={\r\n        color: \"#63ff72\",\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Jumbotron  style={this.style_head}>\r\n                    <h1>My Reads\r\n                    <span style={this.span_style}>.</span>\r\n                    </h1>\r\n                    <h3>The clever way to organise your ebooks</h3>\r\n            </Jumbotron>\r\n        )\r\n    }\r\n}\r\n\r\nexport default HeadSection\r\n","import React from 'react'\r\n\r\n\r\nfunction Footer (){\r\n\r\n\r\n    const footer_style = {\r\n        backgroundColor: \"#CEDFD4\",\r\n        width: \"100%\"\r\n    }\r\n\r\n    return (\r\n        <div style={footer_style}>\r\n            <h5 style={{textAlign: \"right\"}}> © All rights reserved. Designed by Gustav Willig</h5>\r\n        </div>\r\n    )\r\n\r\n\r\n}\r\n\r\nexport default Footer\r\n","import React from \"react\";\r\nimport {search, update} from \"./BooksAPI\";\r\nimport BookCard from \"./BookCard\";\r\nimport {Link} from 'react-router-dom'\r\n\r\n\r\nclass Searchpage extends React.Component{\r\n\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {\r\n            searchResult:[],\r\n            books:this.props.books\r\n        }\r\n    }\r\n\r\n    handleChange(book_id,select_shelf){\r\n        /*\r\n        * @description\r\n            Changes for a given book the shelf\r\n        * */\r\n\r\n\r\n        this.setState(\r\n            {searchResult:this.state.searchResult.map(book=>{\r\n                    if (book.id === book_id){\r\n                        book.shelf = select_shelf\r\n                        //Add Book to shelf\r\n                        this.setState({books:[...this.state.books,book]})\r\n                        // Update in Backend\r\n                        update(book,select_shelf)\r\n                    }\r\n                    return book\r\n                })\r\n                }\r\n        )\r\n\r\n\r\n    }\r\n\r\n    searchBooks = (e)=>{\r\n        let input_field =  e.target.value;\r\n        //1.Step: Check if input value is emtpy:\r\n        if (input_field!==\"\" ){\r\n            search(input_field).then(response=>{\r\n                //Step: Check if response contains an error\r\n                if(response.error){\r\n                    this.setState({searchResult:[]})\r\n                }\r\n                else{\r\n\r\n                    //1.Step: Set the shelf for each book\r\n                    //1.1.Step: Check for every book in search result if it is already in shelf\r\n                    this.state.books.map(book=>{\r\n\r\n                        response.map(book_search_result=>{\r\n\r\n                            if(book.title===\"Pro React\"&&book_search_result.title===\"Pro React\"){\r\n                                book_search_result.shelf=book.shelf\r\n                                return  book_search_result\r\n\r\n                            }\r\n                            //===================\r\n\r\n                            if(book.id===book_search_result.id){\r\n\r\n                                book_search_result.shelf=book.shelf\r\n                                return  book_search_result\r\n                            }\r\n                            //Check if book has already a shelf\r\n                            if(typeof book_search_result.shelf==='undefined'){\r\n                                book_search_result.shelf=\"none\"\r\n                                return  book_search_result\r\n                            }\r\n\r\n                            return  book_search_result\r\n                        })\r\n\r\n                        return book\r\n                    })\r\n\r\n                    this.setState({ searchResult: response})\r\n\r\n\r\n                }\r\n            })\r\n\r\n        }\r\n        else{\r\n            this.setState({searchResult:[]})\r\n        }\r\n\r\n    }\r\n    render(){\r\n\r\n        return(\r\n\r\n            <div className=\"search-books\">\r\n                <div className=\"search-books-bar\">\r\n\r\n                    <Link   to=\"/\">\r\n                        <button className=\"close-search\"></button>\r\n                    </Link>\r\n                    <div className=\"search-books-input-wrapper\">\r\n                        {/*\r\n                  NOTES: The search from BooksAPI is limited to a particular set of search terms.\r\n                  You can find these search terms here:\r\n                  https://github.com/udacity/reactnd-project-myreads-starter/blob/master/SEARCH_TERMS.md\r\n\r\n                  However, remember that the BooksAPI.search method DOES search by title or author. So, don't worry if\r\n                  you don't find a specific author or title. Every search is limited by search terms.\r\n                */}\r\n                        <input onChange={this.searchBooks} type=\"text\" placeholder=\"Search by title or author\"/>\r\n\r\n                    </div>\r\n                </div>\r\n                <div className=\"search-books-results\">\r\n                    <ol className=\"books-grid\">\r\n                        {\r\n                            this.state.searchResult.map((book)=>(\r\n                                <BookCard key={book.id}\r\n                                          book={book}\r\n                                          handleChange={this.handleChange.bind(this)}\r\n                                ></BookCard>\r\n                            ))\r\n                        }\r\n                    </ol>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\nexport default Searchpage\r\n","import React from 'react'\r\nimport './App.css'\r\nimport { Row, Col } from \"react-bootstrap\";\r\nimport BookShelf from './components/Body/BookShelf'\r\nimport HeadSection from './components/Header/HeadSection'\r\nimport Footer from './components/Footer/Footer'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport {BrowserRouter, Link, Route} from 'react-router-dom';\r\nimport Searchpage from './components/Body/Searchpage'\r\nimport {getAll} from \"./components/Body/BooksAPI\";\r\nclass App extends React.Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {\r\n            books:[],\r\n            searchResult:[],\r\n            tabs:[\r\n                {id:1, defaultActiveKey:\"currentlyReading\",title:\"Current Readings\"},\r\n                {id:2, defaultActiveKey:\"wantToRead\",title:\"Want to Read\"},\r\n                {id:3, defaultActiveKey:\"read\",title:\"Read\"},\r\n            ]\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        getAll().then(\r\n            response=>{\r\n                this.setState({ books: response})\r\n\r\n            }\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <BrowserRouter>\r\n                <Route exact path=\"/\" render={props=>(\r\n                <div>\r\n                    <Row style={{backgroundColor:\"#17a2b8\"}}>\r\n                        <Col>\r\n                            <HeadSection></HeadSection>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row  style={{backgroundColor:\"#17a2b8\"}}>\r\n                        <Col style={{paddingRight:\" 0px\"}}>\r\n                        <BookShelf></BookShelf>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row noGutters={true}>\r\n                        <Footer></Footer>\r\n                    </Row>\r\n                    <div className=\"open-search\">\r\n                        <Link   to=\"/search\">\r\n                            <button>Add a book</button>\r\n                        </Link>\r\n\r\n                    </div>\r\n                </div>\r\n                    )}\r\n\r\n                />\r\n                <Route path=\"/search\" render={props=>(\r\n                    <Searchpage books={this.state.books}></Searchpage>\r\n                )}/>\r\n            </BrowserRouter>\r\n        );\r\n    }\r\n}\r\nexport default App\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport './index.css'\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n"],"sourceRoot":""}